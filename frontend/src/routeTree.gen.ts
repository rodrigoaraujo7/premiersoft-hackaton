/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PacientesRouteImport } from './routes/pacientes'
import { Route as MunicipiosRouteImport } from './routes/municipios'
import { Route as MedicoRouteImport } from './routes/medico'
import { Route as HospitaisRouteImport } from './routes/hospitais'
import { Route as EstadosRouteImport } from './routes/estados'
import { Route as CidRouteImport } from './routes/cid'
import { Route as IndexRouteImport } from './routes/index'

const PacientesRoute = PacientesRouteImport.update({
  id: '/pacientes',
  path: '/pacientes',
  getParentRoute: () => rootRouteImport,
} as any)
const MunicipiosRoute = MunicipiosRouteImport.update({
  id: '/municipios',
  path: '/municipios',
  getParentRoute: () => rootRouteImport,
} as any)
const MedicoRoute = MedicoRouteImport.update({
  id: '/medico',
  path: '/medico',
  getParentRoute: () => rootRouteImport,
} as any)
const HospitaisRoute = HospitaisRouteImport.update({
  id: '/hospitais',
  path: '/hospitais',
  getParentRoute: () => rootRouteImport,
} as any)
const EstadosRoute = EstadosRouteImport.update({
  id: '/estados',
  path: '/estados',
  getParentRoute: () => rootRouteImport,
} as any)
const CidRoute = CidRouteImport.update({
  id: '/cid',
  path: '/cid',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cid': typeof CidRoute
  '/estados': typeof EstadosRoute
  '/hospitais': typeof HospitaisRoute
  '/medico': typeof MedicoRoute
  '/municipios': typeof MunicipiosRoute
  '/pacientes': typeof PacientesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cid': typeof CidRoute
  '/estados': typeof EstadosRoute
  '/hospitais': typeof HospitaisRoute
  '/medico': typeof MedicoRoute
  '/municipios': typeof MunicipiosRoute
  '/pacientes': typeof PacientesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cid': typeof CidRoute
  '/estados': typeof EstadosRoute
  '/hospitais': typeof HospitaisRoute
  '/medico': typeof MedicoRoute
  '/municipios': typeof MunicipiosRoute
  '/pacientes': typeof PacientesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cid'
    | '/estados'
    | '/hospitais'
    | '/medico'
    | '/municipios'
    | '/pacientes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cid'
    | '/estados'
    | '/hospitais'
    | '/medico'
    | '/municipios'
    | '/pacientes'
  id:
    | '__root__'
    | '/'
    | '/cid'
    | '/estados'
    | '/hospitais'
    | '/medico'
    | '/municipios'
    | '/pacientes'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CidRoute: typeof CidRoute
  EstadosRoute: typeof EstadosRoute
  HospitaisRoute: typeof HospitaisRoute
  MedicoRoute: typeof MedicoRoute
  MunicipiosRoute: typeof MunicipiosRoute
  PacientesRoute: typeof PacientesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pacientes': {
      id: '/pacientes'
      path: '/pacientes'
      fullPath: '/pacientes'
      preLoaderRoute: typeof PacientesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/municipios': {
      id: '/municipios'
      path: '/municipios'
      fullPath: '/municipios'
      preLoaderRoute: typeof MunicipiosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/medico': {
      id: '/medico'
      path: '/medico'
      fullPath: '/medico'
      preLoaderRoute: typeof MedicoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hospitais': {
      id: '/hospitais'
      path: '/hospitais'
      fullPath: '/hospitais'
      preLoaderRoute: typeof HospitaisRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/estados': {
      id: '/estados'
      path: '/estados'
      fullPath: '/estados'
      preLoaderRoute: typeof EstadosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cid': {
      id: '/cid'
      path: '/cid'
      fullPath: '/cid'
      preLoaderRoute: typeof CidRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CidRoute: CidRoute,
  EstadosRoute: EstadosRoute,
  HospitaisRoute: HospitaisRoute,
  MedicoRoute: MedicoRoute,
  MunicipiosRoute: MunicipiosRoute,
  PacientesRoute: PacientesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
